# Compile project on Ubuntu
name: Ubuntu
on:
  push:
    paths:
      - "**"
      - "!.github/**"
      - ".github/workflows/Ubuntu.yml"
      - "!scripts/"
      - "scripts/actions/install_cuda_ubuntu.sh"
      - "!*.md"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            cuda: "12-0"
            gcc: 11

    env:
      build_dir: "build"
      config: "Release"

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Install/Select gcc and g++
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-${{ matrix.gcc }} g++-${{ matrix.gcc }}
          echo "CC=/usr/bin/gcc-${{ matrix.gcc }}" >> $GITHUB_ENV
          echo "CXX=/usr/bin/g++-${{ matrix.gcc }}" >> $GITHUB_ENV
          echo "CUDAHOSTCXX=/usr/bin/g++-${{ matrix.gcc }}" >> $GITHUB_ENV

      - name: Grant execute permission for install_cuda_ubuntu.sh
        run: chmod +x ./scripts/actions/install_cuda_ubuntu.sh

      - name: Install CUDA Toolkit and NVIDIA Driver
        env:
          cuda: ${{ matrix.cuda }}
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gnupg lsb-release

          # Add NVIDIA repository
          wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu$(lsb_release -rs | sed 's/\.//')/x86_64/cuda-keyring_1.1-1_all.deb
          sudo dpkg -i cuda-keyring_1.1-1_all.deb
          sudo apt-get update

          # Install CUDA toolkit
          sudo apt-get install -y cuda-toolkit-${{ matrix.cuda }}

          # Install NVIDIA driver (fixed version for compatibility)
          sudo apt-get install -y nvidia-driver-525 || true

          # Check installations
          nvcc --version || echo "nvcc not found"
          nvidia-smi || echo "nvidia-smi not available (likely due to virtual runner)"

      - name: Configure cmake
        id: configure
        run: cmake . -B ${{ env.build_dir }} -DCMAKE_BUILD_TYPE=${{ env.config }}

      - name: Configure Error Processing
        if: ${{ failure() && steps.configure.outcome == 'failure' }}
        run: |
          if [[ -d "${{ env.build_dir }}" ]]; then
            pushd "${{ env.build_dir }}"
            if [[ -f "CMakeFiles/CMakeOutput.log" ]]; then
              echo "---- CMakeFiles/CMakeOutput.log"
              cat CMakeFiles/CMakeOutput.log
              echo "----"
            fi
            if [[ -f "CMakeFiles/CMakeError.log" ]]; then
              echo "---- CMakeFiles/CMakeError.log"
              cat CMakeFiles/CMakeError.log
              echo "----"
            fi
          fi

      - name: Build everything else
        working-directory: ${{ env.build_dir }}
        run: cmake --build . --target all --verbose -j `nproc`

  check-gpu:
    name: Run checkgpu.py
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install PyTorch (CPU version for simplicity)
        run: pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu

      - name: Run checkgpu.py
        run: python checkgpu.py
